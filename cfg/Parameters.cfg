#!/usr/bin/env python3

PACKAGE = "robot_faces"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()



nose_shape = gen.enum([gen.const("Annulus",     int_t, 0, "A nose in the shape of a ring"),
                        gen.const("Button",     int_t, 1, "A nose in the shape of a circle"),
                        gen.const("Curve",      int_t, 2, "A nose in the shape of a curve"),
                        gen.const("Inverted_Triangle",      int_t, 3, "A nose in the shape of an inverted triangle")], "An enum representing the shape of the nose")

gen.add("nose_shape", int_t, 0, "The shape of nose", 1, 0, 3, edit_method=nose_shape)

gen.add("pupil_corner_radius", double_t, 0, "Corner radius of pupil", 1.0, 0.0, 1.0)
gen.add("iris_corner_radius", double_t, 0, "Corner radius of iris", 1.0, 0.0, 1.0)


iris_shape = gen.enum([gen.const("Rounded_Rectangle",      int_t, 0, "A rounded rectangle"),
                        gen.const("Thick",     int_t, 1, "Thick/ deep eyes"),
                        gen.const("Oval",     int_t, 2, "Oval shaped eyes"),
                        gen.const("Almond",      int_t, 3, "Humanlike, almond shaped eyes"),
                        gen.const("Arc",      int_t, 4, "Eyes in the shape of an inverted arc")], "An enum representing the shape of the iris")

gen.add("iris_shape", int_t, 0, "The shape of iris", 0, 0, 4, edit_method=iris_shape)

# positioning
positioning_group = gen.add_group("Positioning")
positioning_group.add("eye_spacing", double_t, 0, "Spacing between eyes as a percetange of width", 0.5, 0.0, 1.0)
positioning_group.add("eye_height", double_t, 0, "Height of eyes from top as a percetange of height", 0.25, 0.0, 1.0)
positioning_group.add("eyebrow_spacing", double_t, 0, "Spacing between eyes and eyebrows as a percetange of height", 0.2, 0.0, 1.0)
positioning_group.add("nose_height", double_t, 0, "Height of nose from top between eyes as a percetange of height", 0.5, 0.0, 1.0)
positioning_group.add("mouth_height", double_t, 0, "Height of mouth from tops as a percetange of height", 0.75, 0.0, 1.0)

# colours
colours_group = gen.add_group("Colours")
colours_group.add("background_colour", str_t, 0, "Comma delimited RGBA string of the background", "255,255,255,255")
colours_group.add("nose_colour", str_t, 0, "Comma delimited RGBA string of the nose", "41,41,41,255")
colours_group.add("pupil_colour", str_t, 0, "Comma delimited RGBA string of the pupil", "0,0,0,255")
colours_group.add("iris_colour", str_t, 0, "Comma delimited RGBA string of the iris", "139,69,19,255")
colours_group.add("eyebrow_colour", str_t, 0, "Comma delimited RGBA string of the eyebrows", "34,27,7,255")

# display toggles
display_toggles = gen.add_group("Display Toggles")
display_toggles.add("show_eybrows", bool_t, 0, "Whether to render the eyebrows", True)
display_toggles.add("show_iris", bool_t, 0, "Whether to render the iris", True)
display_toggles.add("show_pupil", bool_t, 0, "Whether to render the pupils", True)
display_toggles.add("show_nose", bool_t, 0, "Whether to render the nose", False)
display_toggles.add("show_mouth", bool_t, 0, "Whether to render the mouth", True)

# scaling
scaling = gen.add_group("Scaling")
scaling.add("nose_scaling", double_t, 0, "Scaling of the nose", 1.0, 0.0, 10.0)
scaling.add("eye_scaling_x", double_t, 0, "X-scaling of the eyes", 1.0, 0.0, 10.0)
scaling.add("eye_scaling_y", double_t, 0, "Y-scaling of the eyes", 1.0, 0.0, 10.0)
scaling.add("eyebrow_scaling", double_t, 0, "Scaling of the eyebrows", 1.0, 0.0, 10.0)
scaling.add("mouth_scaling", double_t, 0, "Scaling of the mouth", 1.0, 0.0, 10.0)


exit(gen.generate(PACKAGE, PACKAGE, "Parameters"))
